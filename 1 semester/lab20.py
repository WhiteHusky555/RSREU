# Цель: Сравнение скорости работы функции math.erfc() по сравнению с её разложением
# Переменные:
# x(float) – вводимое значение х
# eps(float) – значение погрешности
# start_time(int) – начальное значение времени в наносекундах (до вычисления функции)
# current_time(int) – конечное значение времени в наносекундах (по вычислении функции)
# a(float) – член последовательности бесконечной суммы
# s(float) – значение бесконечной суммы
# n(int) – параметр цикла вычисления бесконечной суммы
# a1(float) - значение дополнительной функции ошибок для встроенной функции
# a2(float) - значение дополнительной функции ошибок для функции пользователя
# current_time-start_time(int) – значение времени выполнения и вывода значения функции
# Метод: Использование рекуррентной формулы для вычисления бесконечной суммы
# Программист: Непрокин И.С.
# Дата: 01.12.2023

from math import erfc, exp, pi, sqrt
from time import perf_counter_ns
def CUSTOMerfc(x):
    a=(-1)/(2*x*x)
    s=a
    n=2
    while abs(a) > eps:
        a*=-(2*n-1)/(2*x*x)
        n+=1
        s+=a
    return (s+1)*exp(-x*x)/(x*sqrt(pi))

x=float(input('Введите х: '))
eps=1e-6
start_time = perf_counter_ns()
a1=erfc(x)
print(f'Значение дополнительной функции ошибок (встроенная функция): {a1}')
current_time = perf_counter_ns()
print(f'Время выполнения: {current_time-start_time} наносекунд')
start_time = perf_counter_ns()
a2=CUSTOMerfc(x)
print(f'Значение дополнительной функции ошибок (функция пользователя): {a2}')
current_time = perf_counter_ns()
print(f'Время выполнения: {current_time-start_time} наносекунд')

